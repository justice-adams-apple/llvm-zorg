pipeline {
    parameters {
        string(name: 'LABEL', defaultValue: params.LABEL ?: 'LLVM', description: 'Node label to run on')

        string(name: 'GIT_SHA', defaultValue: params.GIT_REVISION ?: '*/main', description: 'Git commit to build.')

        string(name: 'ARTIFACT', defaultValue: params.ARTIFACT ?: 'clang-stage1-RA/latest', description: 'Clang artifact to use')
    }

    agent {
        node {
            label params.LABEL
        }
    }

    stages {
        stage('Checkout') {
            steps {
                dir('llvm-project') {
                    checkout([$class: 'GitSCM', branches: [
                        [name: params.GIT_SHA]
                    ], extensions: [
                        [$class: 'CloneOption',
                        reference: '/Users/Shared/llvm-project.git']
                    ], userRemoteConfigs: [
                        [url: 'https://github.com/llvm/llvm-project.git']
                    ]])
                }
                // ToDo: Revert to use non-fork repo
                dir('llvm-zorg') {
                    checkout([$class: 'GitSCM', branches: [
                        [name: '*/swift-ci-llvm']
                    ], extensions: [
                        [$class: 'CloneOption',
                        reference: '/Users/Shared/llvm-zorg.git']
                    ], userRemoteConfigs: [
                        [url: 'https://github.com/justice-adams-apple/llvm-zorg.git']
                    ]])
                }
            }
        }
        stage('Setup Venv') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                sh '''
                   # Non-incremental, so always delete.
                   rm -rf clang-build clang-install host-compiler *.tar.gz
                   rm -rf venv
                   xcrun python3 -m venv venv
                   set +u
                   source ./venv/bin/activate
                   pip install psutil requests urllib3==1.26.15
                   pip install -r ./llvm-zorg/requirements.txt
                   set -u
               '''
            }
        }
        stage('Fetch Artifact') {
            // ToDo: Remove environment variable
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
               NO_PROXY='169.254.169.254'
            }
            steps {
                withCredentials([string(credentialsId: 's3_resource_bucket', variable: 'S3_BUCKET')]) {
                    sh """
                        source ./venv/bin/activate
                        echo "ARTIFACT=${params.ARTIFACT}"
                        python llvm-zorg/zorg/jenkins/monorepo_build.py fetch
                        ls $WORKSPACE/host-compiler/lib/clang/
                        VERSION=`ls $WORKSPACE/host-compiler/lib/clang/`
                    """
                }
            }
        }
        stage('Build') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
               DYLD_LIBRARY_PATH="$WORKSPACE/host-compiler/lib/"
            }
            steps {
                sh '''
                   source ./venv/bin/activate
                   python llvm-zorg/zorg/jenkins/monorepo_build.py cmake build \
                       --cmake-type=RelWithDebInfo \
                       --projects="clang;clang-tools-extra;compiler-rt" \
                       --runtimes="libcxx;libcxxabi" \
                       --cmake-flag='-DLLVM_USE_SANITIZER=Thread' \
                       --cmake-flag='-DLLVM_ENABLE_LTO=Thin' \
                       --cmake-flag='-DLLVM_BUILD_RUNTIME=OFF' \
                       --cmake-flag="-DDYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH" \
                       --cmake-build-target=LTO --noinstall
               '''
            }
        }
    }
    post {
        always {
            script {
                sh "rm -rf clang-build clang-install host-compiler *.tar.gz"
            }
        }
    }
}

