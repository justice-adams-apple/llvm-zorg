pipeline {
    agent { label 'green-dragon-04' }

    parameters {
        string(name: 'GIT_REVISION', defaultValue: params.GIT_REVISION ?: '*/main', description: 'Git revision to build')
    }

    stages {
        stage('Checkout') {
            steps {
                dir('llvm-project') {
                    checkout([$class: 'GitSCM', branches: [
                        [name: params.GIT_REVISION]
                    ], extensions: [
                        [$class: 'CloneOption',
                        reference: '/Users/Shared/llvm-project.git']
                    ], userRemoteConfigs: [
                        [url: 'https://github.com/llvm/llvm-project.git']
                    ]])
                }
                dir('llvm-zorg') {
                    checkout([$class: 'GitSCM', branches: [
                        [name: '*/main']
                    ], extensions: [
                        [$class: 'CloneOption',
                        reference: '/Users/Shared/llvm-zorg.git']
                    ], userRemoteConfigs: [
                        [url: 'https://github.com/llvm/llvm-zorg.git']
                    ]])
                }
            }
        }
        stage('Build') {
            steps {
                timeout(120) {
                    sh '''
                    set -u
                    rm -rf build.properties

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")

                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    # Also save the LLVM_REV until LNT server is taught about GIT
                    export LLVM_REV=$(git show -q | grep "llvm-svn:" | cut -f2 -d":" | tr -d " ")

                    cd -

                    export PATH=$PATH:/usr/bin:/usr/local/bin

                    # Set a MacOS minimum deployment target
                    export MACOSX_DEPLOYMENT_TARGET=10.14

                    python llvm-zorg/zorg/jenkins/monorepo_build.py cmake build --assertions --projects="clang"

                    # Removing the local artifact
                    rm -rf clang-*.tar.gz
                    '''
                }
            }
        }
        stage('Test') {
            steps {
                timeout(120) {
                    sh '''
                    set -u
                    export PATH=$PATH:/usr/bin:/usr/local/bin

                    rm -rf clang-build/testresults.xunit.xml

                    python llvm-zorg/zorg/jenkins/monorepo_build.py cmake testlong
                    '''
                }
                junit 'clang-build/**/testresults.xunit.xml'
            }
        }
    }
    post {
        always {
            scanForIssues tool: clang()
        }
        /* Disabled email notification.
        regression {
            emailext subject: '$DEFAULT_SUBJECT',
                    presendScript: '$DEFAULT_PRESEND_SCRIPT',
                    postsendScript: '$DEFAULT_POSTSEND_SCRIPT',
                    recipientProviders: [
                            [$class: 'CulpritsRecipientProvider'],
                            [$class: 'DevelopersRecipientProvider'],
                            [$class: 'RequesterRecipientProvider'],
                    ],
                    replyTo: '$DEFAULT_REPLYTO',
                    to: '$DEFAULT_RECIPIENTS',
                    body:'$DEFAULT_CONTENT'
        }
        */
    }
}
