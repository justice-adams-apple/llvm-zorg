pipeline {
    options {
        disableConcurrentBuilds()
    }

    parameters {
        string(name: 'LABEL', defaultValue: params.LABEL ?: 'macos-x86_64&&ninja', description: 'Node label to run on')

        string(name: 'GIT_REVISION', defaultValue: params.GIT_REVISION ?: '*/main', description: 'Git revision to build')
    }

    agent {
        node {
            label params.LABEL
        }
    }

    stages {
        stage('Checkout') {
            steps {
                dir('llvm-project') {
                    checkout([$class: 'GitSCM', branches: [
                        [name: params.GIT_REVISION]
                    ], extensions: [
                        [$class: 'CloneOption',
                        reference: '/Users/Shared/llvm-project.git']
                    ], userRemoteConfigs: [
                        [url: 'https://github.com/llvm/llvm-project.git']
                    ]])
                }
                // ToDo: Revert to use non-fork repo
                dir('llvm-zorg') {
                    checkout([$class: 'GitSCM', branches: [
                        [name: '*/swift-ci-llvm']
                    ], extensions: [
                        [$class: 'CloneOption',
                        reference: '/Users/Shared/llvm-zorg.git'] //ToDo: Is this reference the same?
                    ], userRemoteConfigs: [
                        [url: 'https://github.com/justice-adams-apple/llvm-zorg.git']
                    ]])
                }
            }
        }
        stage('Setup Venv') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                sh '''
                   rm -rf venv clang-*.tar.gz
                   xcrun python3 -m venv venv
                   set +u
                   source ./venv/bin/activate
                   python -m pip install -r ./llvm-zorg/requirements.txt
                   set -u
               '''
            }
        }
        stage('Build') {
            // ToDo: Remove environment variable
            environment {
                NO_PROXY='169.254.169.254'
                PATH="$PATH:/usr/bin:/usr/local/bin"
                MACOSX_DEPLOYMENT_TARGET="13.6"
            }
            steps {
                withCredentials([string(credentialsId: 's3_resource_bucket', variable: 'S3_BUCKET')]) {
                    timeout(150) {
                        sh '''
                        set -u
                        rm -rf build.properties

                        source ./venv/bin/activate

                        cd llvm-project
                        git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                        git_desc=$(git describe --match "first_commit")

                        export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                        sha=$(echo ${git_desc} | cut -f 3 -d "-")
                        export GIT_SHA=${sha:1}

                        # Also save the LLVM_REV until LNT server is taught about GIT
                        export LLVM_REV=$(git show -q | grep "llvm-svn:" | cut -f2 -d":" | tr -d " ")

                        cd -

                        python llvm-zorg/zorg/jenkins/monorepo_build.py cmake build --assertions --projects="clang" --cmake-flag="-DPython3_EXECUTABLE=$(which python)"
                        '''
                    }
                }
            }
        }
        stage('Test') {
            environment {
                PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                timeout(150) {
                    sh '''
                    set -u
                    source ./venv/bin/activate

                    rm -rf clang-build/testresults.xunit.xml

                    python llvm-zorg/zorg/jenkins/monorepo_build.py cmake testlong
                    '''
                }
            }
        }
    }
    post {
        always {
            script {
                junit allowEmptyResults: true, testResults: "clang-build/**/testresults.xunit.xml"
                sh "rm -rf clang-*.tar.gz"
            }
        }
        // ToDo: Restore the issue scanner
        /* Disabled email notification.
        regression {
            emailext subject: '$DEFAULT_SUBJECT',
                    presendScript: '$DEFAULT_PRESEND_SCRIPT',
                    postsendScript: '$DEFAULT_POSTSEND_SCRIPT',
                    recipientProviders: [
                            [$class: 'CulpritsRecipientProvider'],
                            [$class: 'DevelopersRecipientProvider'],
                            [$class: 'RequesterRecipientProvider'],
                    ],
                    replyTo: '$DEFAULT_REPLYTO',
                    to: '$DEFAULT_RECIPIENTS',
                    body:'$DEFAULT_CONTENT'
        }
        */
    }
}
