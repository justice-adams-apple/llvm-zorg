pipeline {
    parameters {
        string(name: 'LABEL', defaultValue: params.LABEL ?: 'LLVM', description: 'Node label to run on')

        string(name: 'GIT_REVISION', defaultValue: params.GIT_REVISION ?: '*/main', description: 'Git revision to build')
    }

    agent {
        node {
            label params.LABEL
        }
    }

    stages {
        stage('Checkout') {
            steps {
                dir('llvm-project') {
                    checkout([$class: 'GitSCM', branches: [[name: params.GIT_REVISION]], userRemoteConfigs: [[url: 'https://github.com/llvm/llvm-project.git']]])
                }
                // ToDo: Revert to use non-fork repo
                dir('llvm-zorg') {
                    checkout([$class: 'GitSCM', branches: [
                        [name: '*/swift-ci-llvm']
                    ], extensions: [
                        [$class: 'CloneOption',
                        reference: '/Users/Shared/llvm-zorg.git'] //ToDo: Is this reference the same?
                    ], userRemoteConfigs: [
                        [url: 'https://github.com/justice-adams-apple/llvm-zorg.git']
                    ]])
                }
            }
        }
        stage('Setup Venv') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                sh '''
                   # Non-incremental, so always delete just in case.
                   rm -rf clang-build clang-install host-compiler *.tar.gz
                   rm -rf venv
                   xcrun python3 -m venv venv
                   set +u
                   source ./venv/bin/activate
                   python -m pip install -r ./llvm-zorg/requirements.txt
                   set -u
               '''
            }
        }
        stage('Build') {
            environment {
                NO_PROXY='169.254.169.254'
                PATH="$PATH:/usr/bin:/usr/local/bin"
                MACOSX_DEPLOYMENT_TARGET="10.14"
            }
            steps {
                timeout(90) {
                    sh '''
                    set -u

                    source ./venv/bin/activate

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")
                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    python llvm-zorg/zorg/jenkins/monorepo_build.py cmake build \
                      --assertions --cmake-type=RelWithDebInfo \
                      --projects="clang;clang-tools-extra;compiler-rt"
                    '''
                }
            }
        }
        stage('Test') {
            environment {
                PATH="$PATH:/usr/bin:/usr/local/bin"
                SANITIZER_IOSSIM_TEST_DEVICE_IDENTIFIER='iPhone 12'
                COMPILER_RT_TEST_DIR="${WORKSPACE}/clang-build/tools/clang/runtime/compiler-rt-bins/test"
            }
            steps {
                timeout(90) {
                    sh '''
                    set -u

                    source ./venv/bin/activate

                    cd $COMPILER_RT_TEST_DIR/asan && python3 ${WORKSPACE}/clang-build/./bin/llvm-lit \
                      --xunit-xml-output=testresults-asan-IOSSimX86_64Config.xunit.xml -v -vv --timeout=600 \
                      $COMPILER_RT_TEST_DIR/asan/IOSSimX86_64Config/

                    cd $COMPILER_RT_TEST_DIR/tsan && python3 ${WORKSPACE}/clang-build/./bin/llvm-lit \
                      --xunit-xml-output=testresults-tsan-IOSSimX86_64Config.xunit.xml -v -vv --timeout=600 \
                      $COMPILER_RT_TEST_DIR/tsan/IOSSimX86_64Config/

                    cd $COMPILER_RT_TEST_DIR/ubsan && python3 ${WORKSPACE}/clang-build/./bin/llvm-lit \
                      --xunit-xml-output=testresults-ubsan-AddressSanitizer-iossim-x86_64.xunit.xml -v -vv --timeout=600 \
                      $COMPILER_RT_TEST_DIR/ubsan/AddressSanitizer-iossim-x86_64/

                    cd $COMPILER_RT_TEST_DIR/ubsan && python3 ${WORKSPACE}/clang-build/./bin/llvm-lit \
                      --xunit-xml-output=testresults-ubsan-Standalone-iossim-x86_64.xunit.xml -v -vv --timeout=600 \
                      $COMPILER_RT_TEST_DIR/ubsan/Standalone-iossim-x86_64/

                    cd $COMPILER_RT_TEST_DIR/ubsan && python3 ${WORKSPACE}/clang-build/./bin/llvm-lit \
                      --xunit-xml-output=testresults-ubsan-ThreadSanitizer-iossim-x86_64.xunit.xml -v -vv --timeout=600 \
                      $COMPILER_RT_TEST_DIR/ubsan/ThreadSanitizer-iossim-x86_64/
                    '''
                }
                junit 'clang-build/**/testresults-*.xunit.xml'
            }
        }
    }
    // ToDo: Restore the email functionality and issue scanner
    post {
        always {
            script {
                sh "rm -rf clang-build clang-install host-compiler"
            }
        }
        /* Disabled email notification.
        success {
            scanForIssues tool: clang()
        }
        regression {
            emailext subject: '$DEFAULT_SUBJECT',
                    presendScript: '$DEFAULT_PRESEND_SCRIPT',
                    postsendScript: '$DEFAULT_POSTSEND_SCRIPT',
                    recipientProviders: [
                            [$class: 'CulpritsRecipientProvider'],
                            [$class: 'DevelopersRecipientProvider'],
                            [$class: 'RequesterRecipientProvider'],
                    ],
                    replyTo: '$DEFAULT_REPLYTO',
                    to: '$DEFAULT_RECIPIENTS',
                    body:'$DEFAULT_CONTENT'
        }
        */
    }
}
