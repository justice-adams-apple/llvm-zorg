#!/usr/bin/env groovy
pipeline {
    options {
        disableConcurrentBuilds()
    }

    parameters {
        string(name: 'LABEL', defaultValue: params.LABEL ?: 'macos-x86_64', description: 'Node label to run on')

        string(name: 'GIT_SHA', defaultValue: params.GIT_REVISION ?: '*/main', description: 'Git commit to build.')

        string(name: 'ARTIFACT', defaultValue: params.ARTIFACT ?: 'llvm.org/clang-stage2-Rthinlto/latest', description: 'Clang artifact to use')

        string(name: 'BUILD_TYPE', defaultValue: params.BUILD_TYPE ?: 'Release', description: 'Default CMake build type; one of: Release, Debug, ...')

        booleanParam(name: 'CLEAN', defaultValue: params.CLEAN ?: false, description: 'Wipe the build directory?')
    }

    agent {
        node {
            label params.LABEL
        }
    }

    stages {
        stage('Checkout') {
            steps {
                timeout(30) {
                    dir('llvm-project') {
                        checkout([$class: 'GitSCM', branches: [
                            [name: params.GIT_SHA]
                        ], userRemoteConfigs: [
                            [url: 'https://github.com/llvm/llvm-project.git']
                        ], extensions: [
                            [$class: 'CloneOption',
                            reference: '/Users/Shared/llvm-project.git',
                            noTags: true, timeout: 30]
                        ]])
                    }
                    // ToDo: Revert to use non-fork repo
                    dir('llvm-zorg') {
                        checkout([$class: 'GitSCM', branches: [
                            [name: '*/swift-ci-llvm']
                        ], extensions: [
                            [$class: 'CloneOption',
                            reference: '/Users/Shared/llvm-zorg.git']
                        ], userRemoteConfigs: [
                            [url: 'https://github.com/justice-adams-apple/llvm-zorg.git']
                        ]])
                    }
                }
            }
        }
        stage('Setup Venv') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                sh '''
                   # Non-incremental, so always delete.
                   rm -rf venv
                   xcrun python3 -m venv venv
                   set +u
                   source ./venv/bin/activate
                   pip install -r ./llvm-zorg/requirements.txt
                   set -u
               '''
            }
        }
        stage('Fetch') {
            // ToDo: Remove environment variable
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
               NO_PROXY='169.254.169.254'
            }
            steps {
              timeout(90) {
                  sh '''
                  source ./venv/bin/activate

                  # The relay job sets ARTIFACT to the last good LLDB build.
                  # Here we use it to download the last good Clang.
                  export ARTIFACT=clang-stage2-Rthinlto/latest
                  # python3 llvm-zorg/zorg/jenkins/monorepo_build.py fetch

                  echo "Skipping geting the just-built compiler to work around an issue with libcxx."
                  rm -rf host-compiler
                  '''
                }
            }
        }
        stage('Clang Build') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                timeout(90) {
                    sh '''
                    set -u
                    rm -rf build.properties
                    source ./venv/bin/activate

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")

                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    python3 llvm-zorg/zorg/jenkins/monorepo_build.py cmake build \
                      --assertions \
                      --noupload \
                      --projects="clang" \
                      --runtimes="libcxx;libcxxabi;libunwind" \
                      --cmake-flag="-DLLVM_INSTALL_UTILS=On" \
                      --cmake-flag="-DLLVM_INSTALL_TOOLCHAIN_ONLY=Off" \
                      --cmake-flag="-DLLVM_TARGETS_TO_BUILD=X86"
                    '''
                }
            }
        }
        stage('Ninja Standalone Build (build tree)') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
               LLDB_STANDALONE_TYPE="build-tree"
            }
            steps {
                timeout(90) {
                    sh '''
                    set -u
                    rm -rf build.properties
                    source ./venv/bin/activate

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")

                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    python3 $WORKSPACE/llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake-standalone build \
                      --assertions \
                      --cmake-type=Release
                    '''
                }
            }
        }
        stage('Ninja Standalone Build (install tree)') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
               LLDB_STANDALONE_TYPE="install-tree"
            }
            steps {
                timeout(90) {
                    sh '''
                    set -u
                    rm -rf build.properties
                    source ./venv/bin/activate

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")

                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    python3 $WORKSPACE/llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake-standalone build \
                      --assertions \
                      --cmake-type=Release
                    '''
                }
            }
        }
        stage('Xcode Standalone Build (build tree)') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                timeout(90) {
                    sh '''
                    set -u
                    rm -rf build.properties
                    source ./venv/bin/activate

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")

                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    python3 $WORKSPACE/llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake-xcode build \
                      --assertions \
                      --cmake-type=Release
                    '''
                }
            }
        }
        stage('Xcode Standalone Test (build tree)') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                timeout(30) {
                    sh '''
                    set -u
                    source ./venv/bin/activate

                    echo "TEMPORARILY DISABLED (runs with too many jobs in parallel)" python3 $WORKSPACE/llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake-xcode test \
                      --assertions \
                      --cmake-type=Release
                    '''
                }
            }
        }
    }
    /*
    post {
        always {
            // ToDo: Restore issue scanner
            // scanForIssues tool: clang()
        }
    }
    */
}
