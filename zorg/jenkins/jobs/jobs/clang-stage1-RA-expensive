pipeline {
    parameters {
        string(name: 'LABEL', defaultValue: params.LABEL ?: 'LLVM', description: 'Node label to run on')

        string(name: 'GIT_REVISION', defaultValue: params.GIT_REVISION ?: '*/main', description: 'Git revision to build')

        booleanParam(name: 'CLEAN', defaultValue: params.CLEAN ?: false, description: 'Wipe the build directory?')
    }

    agent {
        node {
            label params.LABEL
        }
    }

    stages {
        stage('Checkout') {
            steps {
                dir('llvm-project') {
                    checkout([$class: 'GitSCM', branches: [
                        [name: params.GIT_REVISION]
                    ], extensions: [
                        [$class: 'CloneOption',
                        reference: '/Users/Shared/llvm-project.git']
                    ], userRemoteConfigs: [
                        [url: 'https://github.com/llvm/llvm-project.git']
                    ]])
                }
                // ToDo: Revert to use non-fork repo
                dir('llvm-zorg') {
                    checkout([$class: 'GitSCM', branches: [
                        [name: '*/swift-ci-llvm']
                    ], extensions: [
                        [$class: 'CloneOption',
                        reference: '/Users/Shared/llvm-zorg.git'] //ToDo: Is this reference the same?
                    ], userRemoteConfigs: [
                        [url: 'https://github.com/justice-adams-apple/llvm-zorg.git']
                    ]])
                }
            }
        }
        stage('Build') {
            // ToDo: Remove environment variable
            environment {
                NO_PROXY='169.254.169.254'
            }
            steps {
                timeout(90) {
                    withCredentials([string(credentialsId: 's3_resource_bucket', variable: 'S3_BUCKET')]) {
                        sh '''
                        set -u
                        rm -rf build.properties

                        # install zorg requirements in virtual env
                        python3 -m venv venv
                        venv/bin/python -m pip install -r ./llvm-zorg/requirements.txt
                        venv/bin/python -m pip install psutil lit

                        cd llvm-project
                        git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                        git_desc=$(git describe --match "first_commit")
                        export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                        sha=$(echo ${git_desc} | cut -f 3 -d "-")
                        export GIT_SHA=${sha:1}

                        # Also save the LLVM_REV until LNT server is taught about GIT
                        export LLVM_REV=$(git show -q | grep "llvm-svn:" | cut -f2 -d":" | tr -d " ")

                        cd -

                        echo "GIT_DISTANCE=$GIT_DISTANCE" > build.properties
                        echo "GIT_SHA=$GIT_SHA" >> build.properties
                        echo "ARTIFACT=$JOB_NAME/clang-d$GIT_DISTANCE-g$GIT_SHA-t$BUILD_ID-b$BUILD_NUMBER.tar.gz" >> build.properties

                        export PATH=$PATH:/usr/bin:/usr/local/bin

                        # Set a MacOS minimum deployment target
                        export MACOSX_DEPLOYMENT_TARGET=10.14

                        rm -rf clang-build clang-install *.tar.gz
                        venv/bin/python llvm-zorg/zorg/jenkins/monorepo_build.py cmake all --assertions \
                          --cmake-flag="-DLLVM_ENABLE_EXPENSIVE_CHECKS=ON" \
                          --cmake-flag="-DLIBCXX_ENABLE_SHARED=OFF" \
                          --cmake-flag="-DLIBCXX_ENABLE_STATIC=OFF" \
                          --cmake-flag="-DLIBCXX_INCLUDE_TESTS=OFF" \
                          --cmake-flag="-DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=OFF"
                        '''
                    }
                }
            }
        }
        stage('Test') {
            steps {
                timeout(90) {
                    sh '''
                    set -u
                    export PATH=$PATH:/usr/bin:/usr/local/bin
                    venv/bin/python llvm-zorg/zorg/jenkins/monorepo_build.py cmake testlong
                    '''
                }
                junit 'clang-build/**/testresults.xunit.xml'
            }
        }
    }
    // ToDo: Restore the email functionality and issue scanner
    post {
        always {
            script {
                junit allowEmptyResults: true, testResults: "clang-build/**/testresults.xunit.xml"
                junit allowEmptyResults: true, testResults: "clang-build/asan-IOSSimX86_64Config.xunit.xml"
                junit allowEmptyResults: true, testResults: "clang-build/asan-IOSSimI386Config.xunit.xml"
                junit allowEmptyResults: true, testResults: "clang-build/tsan-IOSSimX86_64Config.xunit.xml"
            }
        }
    }
}

